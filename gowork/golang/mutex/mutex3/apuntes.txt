RW Mutex

The standard library also exposes a sync.RWMutex

In addition to these methods:

    Lock()
    Unlock()

The sync.RWMutex also has these methods for concurrent reads:

    RLock()
    RUnlock()

The sync.RWMutex improves performance in read-intensive processes. 
Multiple goroutines can safely read from the map simultaneously, as many RLock() calls can occur at the same time. 
However, only one goroutine can hold a Lock(), and during this time, all RLock() operations are blocked.

Read/Write Mutex Review

Maps are safe for concurrent read access, just not concurrent read/write or write/write access. 
A read/write mutex allows all the readers to access the map at the same time, but a writer will still lock out all other readers and writers.

package main

import (
	"fmt"
	"sync"
)

func main() {
	m := map[int]int{}

	mu := &sync.RWMutex{}

	go writeLoop(m, mu)
	go readLoop(m, mu)
	go readLoop(m, mu)
	go readLoop(m, mu)
	go readLoop(m, mu)

	// stop program from exiting, must be killed
	block := make(chan struct{})
	<-block
}

func writeLoop(m map[int]int, mu *sync.RWMutex) {
	for {
		for i := 0; i < 100; i++ {
			mu.Lock()
			m[i] = i
			mu.Unlock()
		}
	}
}

func readLoop(m map[int]int, mu *sync.RWMutex) {
	for {
		mu.RLock()
		for k, v := range m {
			fmt.Println(k, "-", v)
		}
		mu.RUnlock()
	}
}

By using a sync.RWMutex, our program becomes more efficient. 
We can have as many readLoop() threads as we want, while still ensuring that the writers have exclusive access.

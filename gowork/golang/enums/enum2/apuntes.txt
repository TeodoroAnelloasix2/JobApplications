Type Definitions

For all its faults, TypeScript does have a pretty incredible type system. 
Here's one of the things it can do that I often miss in Go:

type sendingChannel = "email" | "sms" | "phone";

function sendNotification(ch: sendingChannel, message: string) {
    // send the message
}

This sendingChannel type that we've created is a union type. It can only be one of the three strings that we've defined. 
That means when a developer calls sendNotification() they can't accidentally pass an invalid sendingChannel like "slack" or even a misspelled "emil". 
The TypeScript compiler will catch that mistake at compile time.

In Go, we don't have these nice things. 
We embrace the Grug mentality. 
The closest thing we have to a union type is a type definition:

type sendingChannel string

const (
    Email sendingChannel = "email"
    SMS   sendingChannel = "sms"
    Phone sendingChannel = "phone"
)

func sendNotification(ch sendingChannel, message string) {
    // send the message
}

It's a bit safer than using a plain old string in Go, but it's not completely safe. Go will stop us from doing this:

sendingCh := "slack"
sendNotification(sendingCh, "hello") // string is not sendingChannel

But it will not stop us from doing this:

// "slack" is automatically implied as a sendingChannel
sendNotification("slack", "hello")

And will also not stop us from doing this:

sendingCh := "slack"
convertedSendingCh := sendingChannel(sendingCh)
sendNotification(convertedSendingCh, "hello")

The sendingChannel type is just a wrapper for string, and because we made some constants of that type, 
most developers will just use those constants: we've made it easy to do the right thing. 
That said, Go still doesn't force us to do the right thing like TypeScript does.
Iota

Go has a language feature, that when used with a type definition (and if you squint really hard), kinda looks like an enum (but it's not). 
It's called iota.

type sendingChannel int

const (
    Email sendingChannel = iota
    SMS
    Phone
)

The iota keyword is a special keyword in Go that creates a sequence of numbers. 
It starts at 0 and increments by 1 for each constant in the const block. 
So in the example above, Email is 0, SMS is 1, and Phone is 2.

Go developers sometimes use iota to create a sequence of constants to represent a set of related values, much like you would with an enum in other languages. 
But remember, it's not an enum. It's just a sequence of numbers.



Go Proverbs

Similar to the Zen of Python that we covered in the "Learn Python" course, the Go Proverbs are a beautiful collection of 
wise words from Rob Pike, one of Go's creators.

    Don't communicate by sharing memory, share memory by communicating.

    Concurrency is not parallelism.

    Channels orchestrate; mutexes serialize.

    The bigger the interface, the weaker the abstraction.

    Make the zero value useful.

    interface{} says nothing.

    Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.

    A little copying is better than a little dependency.

    Syscall must always be guarded with build tags.

    Cgo must always be guarded with build tags.

    Cgo is not Go.

    With the unsafe package there are no guarantees.

    Clear is better than clever.

    Reflection is never clear.

    Errors are values.

    Don't just check errors, handle them gracefully.

    Design the architecture, name the components, document the details.

    Documentation is for users.

    Don't panic.

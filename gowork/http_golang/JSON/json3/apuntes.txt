JSON Review

JSON is a stringified representation of a JavaScript object, which makes it perfect for saving to a file or sending in an HTTP request.
Remember, an actual JavaScript object is something that exists only within your program's variables. 
If we want to send an object outside our program, for example, across the internet in an HTTP request, we need to convert it to JSON first.
JSON Isn't Just for JavaScript

Just because JSON is called JavaScript Object Notation doesn't mean it's only used by JavaScript code! 
JSON is a common standard that is recognized and supported by every major programming language. 
For example, even though Boot.dev's backend is written in Go, we still use JSON as the communication format between the front-end and backend.

Common Use-Cases

    In HTTP request and response bodies
    As formats for text files. .json files are often used as configuration files.
    In NoSQL databases like MongoDB, ElasticSearch and Firestore

Unmarshal JSON

We can decode JSON bytes (or strings) into a Go struct using json.Unmarshal or a json.Decoder.

The Decode method of json.Decoder streams data from an io.Reader into a Go struct, while json.Unmarshal works with data that's already in []byte format. 
Using a json.Decoder can be more memory-efficient because it doesn't load all the data into memory at once. 

json.Unmarshal is ideal for small JSON data you already have in memory. 
When dealing with HTTP requests and responses, you will likely use json.Decoder since it works directly with an io.Reader.
Example

// res is an http.Response
defer res.Body.Close()

data, err := io.ReadAll(res.Body)
if err != nil {
	return nil, err
}

var issues []Issue
if err = json.Unmarshal(data, &issues); err != nil {
    return nil, err
}
